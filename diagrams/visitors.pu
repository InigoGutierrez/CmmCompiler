@startuml

interface Visitor<TP, TR>

abstract AbstractVisitor<TP, TR>
class TypeCheckingVisitor<Void, Void>
class IdentificationVisitor<Void, Void>
class OffsetVisitor<Void, Void>

abstract AbstractCGVisitor<TP, TR>
class ValueCGVisitor (expressions)
class AddressCGVisitor (variables)
class ExecuteCGVisitor (statements)

interface Visitor {
    TR visit(Program program, TP param)
    TR visit(Arithmetic arith, TP param)
    {method} ...
    {abstract} (One method per concrete AST node)
}

abstract AbstractVisitor {
    {abstract} (Base parsing behaviour of each interface method)
}

class TypeCheckingVisitor {
    Void visit(Assignment assignment, Void param)
    Void visit(Read read, Void param)
    {abstract} (+ override of each expression method)
}

class IdentificationVisitor {
    - SymbolTable symbolTable
    Void visit(VarDefinition varDef, Void param)
    Void visit(FunctionDefinition fDef, Void param)
    Void visit(Variable variable, Void param)
}

class OffsetVisitor {
    Void visit(RecordType recordType, Void param)
}

class ValueCGVisitor {
    Void visit(Arithmetic, Void)
    Void visit(Variable, Void)
    Void visit(IntLiteral, Void)
}

class ExecuteCGVisitor {
    Void visit(Program, Void)
    Void visit(IfStatement, Void)
}

class AddressCGVisitor {
    Void visit(Variable, Void)
}

Visitor <|.. AbstractVisitor

AbstractVisitor <|-- TypeCheckingVisitor
AbstractVisitor <|-- IdentificationVisitor
AbstractVisitor <|-- OffsetVisitor

@enduml

